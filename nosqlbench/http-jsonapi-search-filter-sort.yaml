min_version: "5.17.3"

# Example command line (when Stargate is running on localhost):
# nb5 -v http-jsonapi-search-filter-sort jsonapi_host=localhost docscount=20000 threads=20

description: >2
  This workload emulates search, filter and sort operations for the Stargate JSON API.
  It generates a simple JSON document to be used for writes and updates.
  During the main phase it performs various search filters and times their execution.
  Note that jsonapi_port should reflect the port where the JSON API is exposed (defaults to 8181).

scenarios:
  default:
    schema: run driver=http tags==block:schema threads==1 cycles==UNDEF
    rampup-write: run driver=http tags==block:write cycles===TEMPLATE(write-cycles,TEMPLATE(docscount,10000000)) threads=auto errors=timer,warn
    rampup-read: run driver=http tags==block:read cycles===TEMPLATE(read-cycles,TEMPLATE(docscount,10000000)) threads=auto errors=timer,warn
    main: run driver=http tags==block:main cycles===TEMPLATE(read-cycles,TEMPLATE(docscount,10000000)) threads=<<threads:auto>> errors=timer,warn
  get:
    get-eq: run driver=http tags==name:main--main-get-eq cycles===TEMPLATE(read-cycles,TEMPLATE(docscount,10000000)) threads=<<threads:auto>> errors=timer,warn
    get-multiple-condition: run driver=http tags==name:main--main-get-multiple-condition cycles===TEMPLATE(read-cycles,TEMPLATE(docscount,10000000)) threads=<<threads:auto>> errors=timer,warn
    get-exists: run driver=http tags==name:main--main-get-exists cycles===TEMPLATE(read-cycles,TEMPLATE(docscount,10000000)) threads=<<threads:auto>> errors=timer,warn
    get-size: run driver=http tags==name:main--main-get-size cycles===TEMPLATE(read-cycles,TEMPLATE(docscount,10000000)) threads=<<threads:auto>> errors=timer,warn
    get-sort: run driver=http tags==name:main--main-get-sort cycles===TEMPLATE(read-cycles,TEMPLATE(docscount,10000000)) threads=<<threads:auto>> errors=timer,warn
    get-sort-options: run driver=http tags==name:main--main-get-sort-options cycles===TEMPLATE(read-cycles,TEMPLATE(docscount,10000000)) threads=<<threads:auto>> errors=timer,warn
    get-projection: run driver=http tags==name:main--main-get-projection cycles===TEMPLATE(read-cycles,TEMPLATE(docscount,10000000)) threads=<<threads:auto>> errors=timer,warn
    get-sort-projection: run driver=http tags==name:main--main-get-sort-projection cycles===TEMPLATE(read-cycles,TEMPLATE(docscount,10000000)) threads=<<threads:auto>> errors=timer,warn

bindings:
  # To enable an optional weighted set of hosts in place of a load balancer
  # Examples
  #   single host: jsonapi_host=host1
  #   multiple hosts: jsonapi_host=host1,host2,host3
  #   multiple weighted hosts: jsonapi_host=host1:3,host2:7
  weighted_hosts: WeightedStrings('<<jsonapi_host:jsonapi>>')

  # spread into different spaces to use multiple connections
  space: HashRange(1,<<connections:20>>); ToString();

  # http request id
  request_id: ToHashedUUID(); ToString();

  # autogenerate auth token to use on API calls using configured uri/uid/password, unless one is provided
  token: Discard(); Token('<<auth_token:>>','<<uri:http://localhost:8081/v1/auth>>', '<<uid:cassandra>>', '<<pswd:cassandra>>');

  seq_key: Mod(<<docscount:10000000>>); ToString() -> String
  random_key: Uniform(0,<<docscount:10000000>>); ToString() -> String

  user_id: ToHashedUUID(); ToString() -> String
  created_on: Uniform(1262304000,1577836800) -> long
  gender: WeightedStrings('M:10;F:10;O:1')
  full_name: FullNames()
  married: ModuloToBoolean()
  city: Cities()
  state: StateCodes()
  country_code: CountryCodes()
  lat: Uniform(-180d, 180d)
  lng: Hash() -> long; Uniform(-180d, 180d)
  friend_id: Add(-1); ToHashedUUID(); ToString() -> String

blocks:
  schema:
    ops:
      create-namespace:
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8181>><<path_prefix:>>/v1
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        Token: "{token}"
        Content-Type: "application/json"
        ok-body: ".*\"ok\":1.*"
        body: |
          {
            "createNamespace": {
              "name": "<<namespace:jsonapi_search_filter_sort>>"
            }
          }

      delete-collection:
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8181>><<path_prefix:>>/v1/<<namespace:jsonapi_search_filter_sort>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        Token: "{token}"
        Content-Type: "application/json"
        ok-body: ".*\"ok\":1.*"
        body: |
          {
            "deleteCollection": {
              "name": "<<collection:docs_collection>>"
            }
          }

      create-collection:
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8181>><<path_prefix:>>/v1/<<namespace:jsonapi_search_filter_sort>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        Token: "{token}"
        Content-Type: "application/json"
        ok-body: ".*\"ok\":1.*"
        body: |
          {
            "createCollection": {
              "name": "<<collection:docs_collection>>"
            }
          }

  write:
    ops:
      # aka insertOne
      write-document:
        space: "{space}"
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8181>><<path_prefix:>>/v1/<<namespace:jsonapi_search_filter_sort>>/<<collection:docs_collection>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        Token: "{token}"
        Content-Type: "application/json"
        ok-body: '.*\"insertedIds\":\[.*\].*'
        body: |
          {
            "insertOne" : {
              "document" : {
                "_id" :         "{seq_key}",
                "user_id":      "{user_id}",
                "created_on":   {created_on},
                "gender":       "{gender}",
                "full_name":    "{full_name}",
                "married":      {married},
                "address": {
                  "primary": {
                      "city":   "{city}",
                      "state":  "{state}",
                      "cc":     "{country_code}"
                  },
                  "secondary":  {}
                },
                "coordinates": [
                                {lat},
                                {lng}
                ],
                "children":     [],
                "friends": [
                                "{friend_id}"
                ]
              }
            }
          }

  read:
    ops:
      # aka findOne with _id as filter
      read:
        space: "{space}"
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8181>><<path_prefix:>>/v1/<<namespace:jsonapi_search_filter_sort>>/<<collection:docs_collection>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        Token: "{token}"
        Content-Type: "application/json"
        ok-body: ".*\"data\".*"
        body: |
          {
            "findOne" : {
              "filter" : {
                "_id" : "{random_key}"
              }
            }
          }

  main:
    ops:
      # aka find with filter using custom index, sort and projection
      main-get-eq:
        space: "{space}"
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8181>><<path_prefix:>>/v1/<<namespace:jsonapi_search_filter_sort>>/<<collection:docs_collection>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        Token: "{token}"
        Content-Type: "application/json"
        ok-body: ".*\"data\".*"
        body: |
          {
            "find" : {
              "filter" : {
                "city" : "{city}"
              }
            }
          }
      main-get-multiple-condition:
        space: "{space}"
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8181>><<path_prefix:>>/v1/<<namespace:jsonapi_search_filter_sort>>/<<collection:docs_collection>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        Token: "{token}"
        Content-Type: "application/json"
        ok-body: ".*\"data\".*"
        body: |
          {
            "find" : {
              "filter" : {
                "city" : "{city}",
                "state" : "{state}"
              }
            }
          }

      main-get-exists:
        space: "{space}"
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8181>><<path_prefix:>>/v1/<<namespace:jsonapi_search_filter_sort>>/<<collection:docs_collection>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        Token: "{token}"
        Content-Type: "application/json"
        ok-body: ".*\"data\".*"
        body: |
          {
            "find" : {
              "filter" : {
                "user_id" : {"$exists":true}
              }
            }
          }
      main-get-size:
        space: "{space}"
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8181>><<path_prefix:>>/v1/<<namespace:jsonapi_search_filter_sort>>/<<collection:docs_collection>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        Token: "{token}"
        Content-Type: "application/json"
        ok-body: ".*\"data\".*"
        body: |
          {
            "find" : {
              "filter" : {
                "coordinates" : {"$size":2}
              }
            }
          }

      main-get-sort:
        space: "{space}"
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8181>><<path_prefix:>>/v1/<<namespace:jsonapi_search_filter_sort>>/<<collection:docs_collection>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        Token: "{token}"
        Content-Type: "application/json"
        ok-body: ".*\"data\".*"
        body: |
          {
            "find" : {
              "filter" : {
                "city" : "{city}"
              },
              "sort": {"full_name" : 1}
            }
          }

      main-get-sort-options:
        space: "{space}"
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8181>><<path_prefix:>>/v1/<<namespace:jsonapi_search_filter_sort>>/<<collection:docs_collection>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        Token: "{token}"
        Content-Type: "application/json"
        ok-body: ".*\"data\".*"
        body: |
          {
            "find" : {
              "filter" : {
                "city" : "{city}"
              },
              "sort": {"full_name" : 1},
              "options": {"limit": 10, "skip": 20}
            }
          }

      main-get-projection:
        space: "{space}"
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8181>><<path_prefix:>>/v1/<<namespace:jsonapi_search_filter_sort>>/<<collection:docs_collection>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        Token: "{token}"
        Content-Type: "application/json"
        ok-body: ".*\"data\".*"
        body: |
          {
            "find" : {
              "filter" : {
                "city" : "{city}"
              },
              "projection": {"_id" : 0}
            }
          }

      main-get-sort-projection:
        space: "{space}"
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8181>><<path_prefix:>>/v1/<<namespace:jsonapi_search_filter_sort>>/<<collection:docs_collection>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        Token: "{token}"
        Content-Type: "application/json"
        ok-body: ".*\"data\".*"
        body: |
          {
            "find" : {
              "filter" : {
                "city" : "{city}"
              },
              "sort": {"full_name" : 1},
              "projection": {"_id" : 0}
            }
          }
