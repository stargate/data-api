min_version: "4.17.31"

description: |
  This workload emulates basic search operations for the Stargate Documents API.
  During the rampup phase, it generates documents, writes them to a table, and then warms up the search paths.
  During the main phase it performs various basic search filters and times their execution.
  Note that jsonapi_port should reflect the port where the Docs API is exposed (defaults to 8080).

scenarios:
  schema: run driver=http tags==block:schema threads==<<threads:1>> cycles==UNDEF
  rampup:
    write: run driver=http tags==block:"rampup-put.*" cycles===TEMPLATE(rampup-cycles, TEMPLATE(docscount,10000000)) docpadding=TEMPLATE(docpadding,0) match-ratio=TEMPLATE(match-ratio,0.01) threads=<<threads:auto>> errors=timer,warn
    read: run driver=http tags==block:"rampup-get.*" cycles===TEMPLATE(rampup-cycles, TEMPLATE(docscount,10000000)) page-size=TEMPLATE(page-size,3) fields=TEMPLATE(fields,%5b%5d) threads=<<threads:auto>> errors=timer,warn
  main:
    all: run driver=http tags==block:main cycles===TEMPLATE(read-cycles,TEMPLATE(docscount,10000000)) page-size=TEMPLATE(page-size,3) fields=TEMPLATE(fields,%5b%5d) threads=<<threads:auto>> errors=timer,warn
    get-eq: run driver=http tags==block:main-get-eq,filter:eq cycles===TEMPLATE(read-cycles,TEMPLATE(docscount,10000000)) page-size=TEMPLATE(page-size,3) fields=TEMPLATE(fields,%5b%5d) threads=<<threads:auto>> errors=timer,warn
    get-lt: run driver=http tags==block:main-get-lt cycles===TEMPLATE(read-cycles,TEMPLATE(docscount,10000000)) page-size=TEMPLATE(page-size,3) fields=TEMPLATE(fields,%5b%5d) threads=<<threads:auto>> errors=timer,warn
    get-and: run driver=http tags==block:main-get-and cycles===TEMPLATE(read-cycles,TEMPLATE(docscount,10000000)) page-size=TEMPLATE(page-size,3) fields=TEMPLATE(fields,%5b%5d) threads=<<threads:auto>> errors=timer,warn
    get-or: run driver=http tags==block:main-get-or cycles===TEMPLATE(read-cycles,TEMPLATE(docscount,10000000)) page-size=TEMPLATE(page-size,3) fields=TEMPLATE(fields,%5b%5d) threads=<<threads:auto>> errors=timer,warn
    get-or-single-match: run driver=http tags==block:main-get-or-single-match cycles===TEMPLATE(read-cycles,TEMPLATE(docscount,10000000)) page-size=TEMPLATE(page-size,3) fields=TEMPLATE(fields,%5b%5d) threads=<<threads:auto>> errors=timer,warn

bindings:
  # To enable an optional weighted set of hosts in place of a load balancer
  # Examples
  #   single host: jsonapi_host=host1
  #   multiple hosts: jsonapi_host=host1,host2,host3
  #   multiple weighted hosts: jsonapi_host=host1:3,host2:7
  weighted_hosts: WeightedStrings('<<jsonapi_host:jsonapi>>')
  # http request id
  request_id: ToHashedUUID(); ToString();

  seq_key: Mod(<<docscount:10000000>>); ToString() -> String
  random_key: Uniform(0,<<docscount:10000000>>); ToString() -> String

  user_id: ToHashedUUID(); ToString() -> String
  created_on: Uniform(1262304000,1577836800) -> long
  full_name: FullNames()
  married: ModuloToBoolean()
  city: Cities()
  country_code: CountryCodes()
  lat: Uniform(-180d, 180d)
  lng: Hash() -> long; Uniform(-180d, 180d)
  friend_id: Add(-1); ToHashedUUID(); ToString() -> String

  match1: Identity(); CoinFunc(<<match-ratio>>, FixedValue(0), FixedValue(1000))
  match2: Identity(); CoinFunc(<<match-ratio>>, FixedValue("true"), FixedValue("false"))
  #additional_fields: ListSizedStepped(<<docpadding:0>>,Template("\"{}\":{}",Identity(),Identity())); ToString(); ReplaceAll('\[\"', ',\"'); ReplaceAll('\[', ''); ReplaceAll('\]', '') -> String

blocks:
  schema:
    ops:
      create-namespace:
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8080>><<path_prefix:>>/v1
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "<<auth_token:my_auth_token>>"
        Content-Type: "application/json"
        ok-body: ".*\"ok\":1.*"
        body: |
          {
            "createNamespace": {
              "name": "<<namespace:jsonapi_search_basic>>"
            }
          }

      delete-collection:
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8080>><<path_prefix:>>/v1/<<namespace:jsonapi_search_basic>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "<<auth_token:my_auth_token>>"
        Content-Type: "application/json"
        ok-body: ".*\"ok\":1.*"
        body: |
          {
            "deleteCollection": {
              "name": "<<collection:docs_collection>>"
            }
          }

      create-collection:
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8080>><<path_prefix:>>/v1/<<namespace:jsonapi_search_basic>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "<<auth_token:my_auth_token>>"
        Content-Type: "application/json"
        ok-body: ".*\"ok\":1.*"
        body: |
          {
            "createCollection": {
              "name": "<<collection:docs_collection>>"
            }
          }

  rampup:
    ops:
      rampup-put:
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8080>><<path_prefix:>>/v1/<<namespace:jsonapi_search_basic>>/<<collection:docs_collection>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "<<auth_token:my_auth_token>>"
        Content-Type: "application/json"
        ok-body: ".*\"insertedIds\":\"{seq_key}\".*"
        body: |
          {
            "insertOne": {
              "document": {
                "_id": "{seq_key}",
                "user_id": "{user_id}",
                "created_on": { created_on },
                "full_name": "{full_name}",
                "married": { married },
                "address": {
                  "primary": {
                    "city": "{city}",
                    "cc": "{country_code}"
                  },
                  "secondary": { }
                },
                "coordinates": [
                  { lat },
                  { lng }
                ],
                "children": [ ],
                "friends": [
                  "{friend_id}"
                ],
                "debt": null,
                "match1": { match1 },
                "match2": "{match2}",
                "match3": { match2 }
                { additional_fields }
              }
            }
          }

      # where={"match3":{"$eq":true}}
      rampup-get-eq:
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8080>><<path_prefix:>>/v1/<<namespace:jsonapi_search_basic>>/<<collection:docs_collection>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "<<auth_token:my_auth_token>>"
        Content-Type: "application/json"
        ok-body: ".*\"data\".*"
        body: |
          {
            "find" : {
              "filter" : {
                "match3" : {"$eq":true}
              },
              "options": {
                "pageSize": <<page_size,20>> 
              }
            }
          }        

      # where={"match1":{"$lt":1}}
      rampup-get-lt:
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8080>><<path_prefix:>>/v1/<<namespace:jsonapi_search_basic>>/<<collection:docs_collection>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "<<auth_token:my_auth_token>>"
        Content-Type: "application/json"
        ok-body: ".*\"data\".*"
        body: |
          {
            "find" : {
              "filter" : {
                "match1" : {"$lt":1}
              },
              "options": {
                "pageSize": <<page_size,20>> 
              }
            }
          }

      # where={"match1":{"$lt":1},"match2":{"$eq":"true"}}
      rampup-get-and:
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8080>><<path_prefix:>>/v1/<<namespace:jsonapi_search_basic>>/<<collection:docs_collection>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "<<auth_token:my_auth_token>>"
        Content-Type: "application/json"
        ok-body: ".*\"data\".*"
        body: |
          {
            "find" : {
              "filter" : {
                "match1" : {"$lt":1},
                "match2" : {"$eq":"true"}
              },
              "options": {
                "pageSize": <<page_size,20>> 
              }
            }
          }

      # where={"$or":[{"match1":{"$lt":1}},{"match3":{"$eq":true}}]}
      rampup-get-or:
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8080>><<path_prefix:>>/v1/<<namespace:jsonapi_search_basic>>/<<collection:docs_collection>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "<<auth_token:my_auth_token>>"
        Content-Type: "application/json"
        ok-body: ".*\"data\".*"
        body: |
          {
            "find" : {
              "filter" : {
                "or" : [
                  {"match1" : {"$lt":1}},
                  {"match3" : {"$eq":true}}
                ]
              },
              "options": {
                "pageSize": <<page_size,20>> 
              }
            }
          }

      # where={"$or":[{"match1":{"$lt":1}},{"match2":{"$eq":"notamatch"}}]}
      rampup-get-or-single-match:
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8080>><<path_prefix:>>/v1/<<namespace:jsonapi_search_basic>>/<<collection:docs_collection>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "<<auth_token:my_auth_token>>"
        Content-Type: "application/json"
        ok-body: ".*\"data\".*"
        body: |
          {
            "find" : {
              "filter" : {
                "or" : [
                  {"match1" : {"$lt":1}},
                  {"match2" : {"$eq":"notamatch"}}
                ]
              },
              "options": {
                "pageSize": <<page_size,20>> 
              }
            }
          }

  main:
    ops:
      # where={"match3":{"$eq":true}}
      main-get-eq:
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8080>><<path_prefix:>>/v1/<<namespace:jsonapi_search_basic>>/<<collection:docs_collection>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "<<auth_token:my_auth_token>>"
        Content-Type: "application/json"
        ok-body: ".*\"data\".*"
        body: |
          {
            "find" : {
              "filter" : {
                "match3" : {"$eq":true}
              },
              "options": {
                "pageSize": <<page_size,20>> 
              }
            }
          }

      # where={"match1":{"$lt":1}}
      main-get-lt:
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8080>><<path_prefix:>>/v1/<<namespace:jsonapi_search_basic>>/<<collection:docs_collection>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "<<auth_token:my_auth_token>>"
        Content-Type: "application/json"
        ok-body: ".*\"data\".*"
        body: |
          {
            "find" : {
              "filter" : {
                "match1" : {"$lt":1}
              },
              "options": {
                "pageSize": <<page_size,20>> 
              }
            }
          }

      # where={"match1":{"$lt":1},"match2":{"$eq":"true"}}
      main-get-and:
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8080>><<path_prefix:>>/v1/<<namespace:jsonapi_search_basic>>/<<collection:docs_collection>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "<<auth_token:my_auth_token>>"
        Content-Type: "application/json"
        ok-body: ".*\"data\".*"
        body: |
          {
            "find" : {
              "filter" : {
                "match1" : {"$lt":1},
                "match2" : {"$eq":"true"}
              },
              "options": {
                "pageSize": <<page_size,20>> 
              }
            }
          }

      # where={"$or":[{"match1":{"$lt":1}},{"match3":{"$eq":true}}]}
      main-get-or:
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8080>><<path_prefix:>>/v1/<<namespace:jsonapi_search_basic>>/<<collection:docs_collection>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "<<auth_token:my_auth_token>>"
        Content-Type: "application/json"
        ok-body: ".*\"data\".*"
        body: |
          {
            "find" : {
              "filter" : {
                "or" : [
                  {"match1" : {"$lt":1}},
                  {"match3" : {"$eq":true}}
                ]
              },
              "options": {
                "pageSize": <<page_size,20>> 
              }
            }
          }

      # where={"$or":[{"match1":{"$lt":1}},{"match2":{"$eq":"notamatch"}}]}
      main-get-or-single-match:
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8080>><<path_prefix:>>/v1/<<namespace:jsonapi_search_basic>>/<<collection:docs_collection>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "<<auth_token:my_auth_token>>"
        Content-Type: "application/json"
        ok-body: ".*\"data\".*"
        body: |
          {
            "find" : {
              "filter" : {
                "or" : [
                  {"match1" : {"$lt":1}},
                  {"match2" : {"$eq":"notamatch"}}
                ]
              },
              "options": {
                "pageSize": <<page_size,20>> 
              }
            }
          }
