min_version: "5.17.3"

# Example command line (when Stargate is running on localhost):
# nb5 -v dataset-test-nosqlbench default threads=30

description: >2
  This workload emulates CRUD operations for the Stargate Documents API.
  It requires a data set file (default sample-dataset.txt), where each line is a single JSON document to be used for writes and updates.
  Note that jsonapi_port should reflect the port where the Docs API is exposed (defaults to 8181).

scenarios:
  default:
    schema-namespace: run driver=http tags==block:schema-namespace threads==1 cycles==UNDEF
    schema-collection: run driver=http tags==block:schema-collection threads==1 cycles==UNDEF
    write:   run driver=http tags==name:"write.*" cycles===TEMPLATE(write-cycles,TEMPLATE(docscount,10000)) threads=auto errors=timer,warn
    main:    run driver=http tags==block:main cycles===TEMPLATE(read-cycles,100000) threads=auto errors=timer,warn

bindings:
  # To enable an optional weighted set of hosts in place of a load balancer
  # Examples
  #   single host: jsonapi_host=host1
  #   multiple hosts: jsonapi_host=host1,host2,host3
  #   multiple weighted hosts: jsonapi_host=host1:3,host2:7
  weighted_hosts: WeightedStrings('<<jsonapi_host:<<stargate_host:localhost>>>>')

  # spread into different spaces to use multiple connections
  space: HashRange(1,<<connections:20>>); ToString();

  # field name to be used to check the $exists filter
  exists_key: WeightedStrings('<<exists_key:data>>'); ToString();

  # field name to be used for sorting
  sort_key: WeightedStrings('<<sort_key:data.size>>'); ToString();

  # http request id
  request_id: ToHashedUUID(); ToString();

  # autogenerate auth token to use on API calls using configured uri/uid/password, unless one is provided
  token: Discard(); Token('<<auth_token:>>','<<uri:http://localhost:8081/v1/auth>>', '<<uid:cassandra>>', '<<pswd:cassandra>>');

  seq_key: Mod(<<docscount:10000>>); ToString() -> String
  random_key: Uniform(0,<<docscount:10000>>); ToString() -> String
  document_json_without_id: HashedLineToString('<<dataset:sample-dataset.txt>>');

  #Adding some data to verify different types of filters
  full_name: FullNames();
  group: HashRange(1,<<sort_groups:20>>); ToString();


blocks:
  schema-namespace:
    ops:
      create-namespace:
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8181>><<path_prefix:>>/v1
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        ok-body: ".*\"ok\":1.*"
        body: >2
          {
            "createNamespace": {
              "name": "<<namespace:jsonapi_dataset_test>>"
            }
          }

  schema-collection:
    ops:
      delete-collection:
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8181>><<path_prefix:>>/v1/<<namespace:jsonapi_dataset_test>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        ok-body: ".*\"ok\":1.*"
        body: >2
          {
            "deleteCollection": {
              "name": "<<collection:docs_collection>>"
            }
          }

      create-collection:
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8181>><<path_prefix:>>/v1/<<namespace:jsonapi_dataset_test>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        ok-body: ".*\"ok\":1.*"
        body: >2
          {
            "createCollection": {
              "name": "<<collection:docs_collection>>"
            }
          }

  write:
    ops:
      write-document:
        space: "{space}"
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8181>><<path_prefix:>>/v1/<<namespace:jsonapi_dataset_test>>/<<collection:docs_collection>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        ok-body: '.*\"insertedIds\":\[.*\].*'
        body: >2
          {
            "insertOne" : {
              "document" : { 
                "_id" :         "{seq_key}",
                "full_name" :   "{full_name}",
                "group" :       "{group}",
                "data" :        {document_json_without_id}
              }
            }
          }

  main:
    ops:
      # aka findOne with _id as filter
      find-one-id:
        space: "{space}"
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8181>><<path_prefix:>>/v1/<<namespace:jsonapi_dataset_test>>/<<collection:docs_collection>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        ok-body: ".*\"data\".*"
        body: >2
          {
            "findOne" : {
              "filter" : {
                "_id" : "{random_key}"
              }
            }
          } 

      # aka findOne with single property as filter
      find-one-by-group:
        space: "{space}"
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8181>><<path_prefix:>>/v1/<<namespace:jsonapi_dataset_test>>/<<collection:docs_collection>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        ok-body: ".*\"data\".*"
        body: >2
          {
            "findOne" : {
              "filter" : {
                "group" : "{group}"
              }
            }
          }  

      # aka find with $exist
      find-multi-by-exists:
        space: "{space}"
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8181>><<path_prefix:>>/v1/<<namespace:jsonapi_dataset_test>>/<<collection:docs_collection>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        ok-body: ".*\"data\".*"
        body: >2
          {
            "find" : {
              "filter" : {
                "{exists_key}": { "$exists": true }
              }
            }
          }

      # aka find with $eq and $exist and $projection
      find-multi-by-exists-key-with-projection:
        space: "{space}"
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8181>><<path_prefix:>>/v1/<<namespace:jsonapi_dataset_test>>/<<collection:docs_collection>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        ok-body: ".*\"data\".*"
        body: >2
          {
            "find" : {
              "filter" : {
                "{exists_key}": { "$exists": true }
              },
              "projection": {
                "full_name": 1,
                "data": 1
              }
            }
          }

      # aka find with filter and sort
      find-multi-by-group-sort-by-sort-key:
        space: "{space}"
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8181>><<path_prefix:>>/v1/<<namespace:jsonapi_dataset_test>>/<<collection:docs_collection>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        ok-body: ".*\"data\".*"
        body: >2
          {
            "find" : {
              "filter" : {
                "group" : "{group}"
              },
              "sort": {
                "{sort_key}": 1
              }
            }
          }

      # aka updateOne
      # for parity with other tests this only uses set, not unset, no return value
      update-one-document:
        space: "{space}"
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8181>><<path_prefix:>>/v1/<<namespace:jsonapi_dataset_test>>/<<collection:docs_collection>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        # because this is not an upsert, modified count could technically be 0 or 1,
        # but since we are fixing the _ids to be sequential over the docscount range during the write phase,
        # every update during this phase should update exactly 1 document.
        ok-body: ".*\"modifiedCount\":[0,1].*"
        body: >2
          {
            "updateOne" : {
              "filter": {
                "_id" : "{random_key}"
              },
              "update": {
                "$set": {
                  "update_field": "{seq_key}"
                }
              }
            }
          }

      # Delete record by id
      delete-one-document:
        space: "{space}"
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8181>><<path_prefix:>>/v1/<<namespace:jsonapi_dataset_test>>/<<collection:docs_collection>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        ok-body: ".*\"deletedCount\":[0,1].*"
        body: >2
          {
            "deleteOne" : {
              "filter" : {
                "_id" : "{random_key}"
              }
            }
          }

        # find one and replace with upsert
      find-one-id-and-replace-upsert:
        space: "{space}"
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<jsonapi_port:8181>><<path_prefix:>>/v1/<<namespace:jsonapi_dataset_test>>/<<collection:docs_collection>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        ok-body: ".*\"data\".*"
        body: >2
          {
            "findOneAndReplace" : {
              "filter" : {
                "_id": "{random_key}"
              },
              "replacement": {
                "_id": "{random_key}",
                "full_name" : "{full_name}",
                "group" : "{group}",
                "data" : {document_json_without_id}
              },
              "options": {
                "upsert": true
              }
            }
          }  
