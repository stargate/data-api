min_version: "5.17.3"

# Example command line (when Stargate is running on localhost):
# nb5 -v http-dataapi-crud-basic dataapi_host=localhost docscount=20000 threads=20

description: >2
  This workload emulates CRUD operations for the Stargate Data API.
  It generates a simple JSON document to be used for writes and updates.
  Note that dataapi_port should reflect the port where the Data API is exposed (defaults to 8181).

scenarios:
  default:
    schema:   run driver=http tags==block:schema threads==1 cycles==UNDEF
    write:    run driver=http tags==name:"write.*" cycles===TEMPLATE(write-cycles,TEMPLATE(docscount,10000000)) threads=auto errors=timer,warn
    read:     run driver=http tags==name:"read.*" cycles===TEMPLATE(read-cycles,TEMPLATE(docscount,10000000)) threads=auto errors=timer,warn
    update:   run driver=http tags==name:"update.*" cycles===TEMPLATE(update-cycles,TEMPLATE(docscount,10000000)) threads=auto errors=timer,warn
    delete:   run driver=http tags==name:"delete.*" cycles===TEMPLATE(delete-cycles,TEMPLATE(docscount,10000000)) threads=auto errors=timer,warn

bindings:
  # To enable an optional weighted set of hosts in place of a load balancer
  # Examples
  #   single host: dataapi_host=host1
  #   multiple hosts: dataapi_host=host1,host2,host3
  #   multiple weighted hosts: dataapi_host=host1:3,host2:7
  weighted_hosts: WeightedStrings('<<dataapi_host:dataapi>>')

  # spread into different spaces to use multiple connections
  space: HashRange(1,<<connections:20>>); ToString();

  # http request id
  request_id: ToHashedUUID(); ToString();

  # autogenerate auth token to use on API calls using configured uri/uid/password, unless one is provided
  token: Discard(); Token('<<auth_token:>>','<<uri:http://localhost:8081/v1/auth>>', '<<uid:cassandra>>', '<<pswd:cassandra>>');

  seq_key: Mod(<<docscount:10000000>>); ToString() -> String
  random_key: Uniform(0,<<docscount:10000000>>); ToString() -> String

  user_id: ToHashedUUID(); ToString() -> String
  created_on: Uniform(1262304000,1577836800) -> long
  gender: WeightedStrings('M:10;F:10;O:1')
  full_name: FullNames()
  married: ModuloToBoolean()
  city: Cities()
  country_code: CountryCodes()
  lat: Uniform(-180d, 180d)
  lng: Hash() -> long; Uniform(-180d, 180d)
  friend_id: Add(-1); ToHashedUUID(); ToString() -> String

blocks:
  schema:
    ops:
      create-namespace:
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<dataapi_port:8181>><<path_prefix:>>/v1
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        Token: "{token}"
        Content-Type: "application/json"
        ok-body: ".*\"ok\":1.*"
        body: >2
          {
            "createNamespace": {
              "name": "<<namespace:dataapi_crud_basic>>"
            }
          }

      delete-collection:
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<dataapi_port:8181>><<path_prefix:>>/v1/<<namespace:dataapi_crud_basic>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        Token: "{token}"
        Content-Type: "application/json"
        ok-body: ".*\"ok\":1.*"
        body: >2
          {
            "deleteCollection": {
              "name": "<<collection:docs_collection>>"
            }
          }

      create-collection:
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<dataapi_port:8181>><<path_prefix:>>/v1/<<namespace:dataapi_crud_basic>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        Token: "{token}"
        Content-Type: "application/json"
        ok-body: ".*\"ok\":1.*"
        body: >2
          {
            "createCollection": {
              "name": "<<collection:docs_collection>>"
            }
          }

  write:
    ops:
      # aka insertOne
      write-document:
        space: "{space}"
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<dataapi_port:8181>><<path_prefix:>>/v1/<<namespace:dataapi_crud_basic>>/<<collection:docs_collection>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        Token: "{token}"
        Content-Type: "application/json"
        ok-body: '.*\"insertedIds\":\[.*\].*'
        body: >2
          {
            "insertOne" : {
              "document" : {
                "_id" :         "{seq_key}",
                "user_id":      "{user_id}",
                "created_on":   {created_on},
                "gender":       "{gender}",
                "full_name":    "{full_name}",
                "married":      {married},
                "address": {
                  "primary": {
                      "city":   "{city}",
                      "cc":     "{country_code}"
                  },
                  "secondary":  {}
                },
                "coordinates": [
                                {lat},
                                {lng}
                ],
                "children":     [],
                "friends": [
                                "{friend_id}"
                ]
              }
            }
          }

  read:
    ops:
      # aka findOne with _id as filter
      read-document:
        space: "{space}"
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<dataapi_port:8181>><<path_prefix:>>/v1/<<namespace:dataapi_crud_basic>>/<<collection:docs_collection>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        Token: "{token}"
        Content-Type: "application/json"
        ok-body: ".*\"data\".*"
        body: >2
          {
            "findOne" : {
              "filter" : {
                "_id" : "{random_key}"
              }
            }
          }

  update:
    ops:
      # aka updateOne
      # for parity with other tests this only uses set, not unset, no return value
      update-document:
        space: "{space}"
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<dataapi_port:8181>><<path_prefix:>>/v1/<<namespace:dataapi_crud_basic>>/<<collection:docs_collection>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        Token: "{token}"
        Content-Type: "application/json"
        # because this is not an upsert, modified count could technically be 0 or 1,
        # but since we are fixing the _ids to be sequential over the docscount range during the write phase,
        # every update during this phase should update exactly 1 document.
        ok-body: ".*\"modifiedCount\":1.*"
        body: >2
          {
            "updateOne" : {
              "filter": {
                "_id" : "{random_key}"
              },
              "update": {
                "$set": {
                  "user_id":      "{user_id}",
                  "created_on":   {created_on},
                  "gender":       "{gender}",
                  "full_name":    "{full_name}",
                  "married":      {married},
                  "address": {
                    "primary": {
                        "city":   "{city}",
                        "cc":     "{country_code}"
                    },
                    "secondary":  {}
                  },
                  "coordinates": [
                                  {lat},
                                  {lng}
                  ],
                  "children":     [],
                  "friends": [
                                  "{friend_id}"
                  ],
                  "debt":         null
                }
              }
            }
          }

  delete:
    ops:
      delete-document:
        space: "{space}"
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<dataapi_port:8181>><<path_prefix:>>/v1/<<namespace:dataapi_crud_basic>>/<<collection:docs_collection>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        Token: "{token}"
        Content-Type: "application/json"
        ok-body: ".*\"deletedCount\":[0,1].*"
        body: >2
          {
            "deleteOne" : {
              "filter" : {
                "_id" : "{random_key}"
              }
            }
          }
