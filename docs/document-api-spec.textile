h1. Document API Query Specification

<span id="tableOfContents">

{toc:maxLevel=3}

</span>

h2(#preamble). Preamble

The target users for the Document API are Javascript developers who interact with the service through a driver or Object Document Mapper (ODM) library such as "Mongoose":https://github.com/Automattic/mongoose. The nature of a Document API lends itself to complex, structured queries that may express compound or multiple operations in a single request. Such as selecting one or more documents and projecting a selection of fields from each, or selecting one or more documents and updating them server side. We consider that most requests are generated via the ODM (for example via "mquery":https://github.com/aheckmann/mquery) which makes it easy for the developer to create complex queries at code time, or at run time in response to the actions taken by a user (such as which fields were updated, or which fields the user wants to see). The implementation of the Document API should therefor be optimized for expressing complex and compound machine generated queries, rather than developers making direct queries via the wire protocol API.      

The API should be implemented using HTTP 1 or 2 using JSON as the accepted and returned content type, however adherence to a design pattern such REST is not recommended. This is because of the above expected use through an ODM, and due to the complexity that can be expressed in the Document API. The specification includes compound operations, such as find and update, to be implemented in the server which do not have a clear mapping to the REST verbs. 

Additionally consideration should be given to implementing that API such that the body of a request can be machine generated and includes all possible information needed to process the request. With the exception of any out of band information such as authentication and possibly the collection name. This approach makes it easier to integrate the Document API service with other data services though the use of templates or code to generate a request.

h2(#concepts). High Level Concepts

The Document API consists of the following high level concepts that are composed to create a request: 

* *Namespace:* A logical container representing a distinct storage location and query boundary which can contain multiple collections. May map to a keyspace or database.
* *Collection:* A logical container of documents that have some meaning to the developer using the API. Often an ODM may map a single developer defined class or type to a collection.
* *Document:* A document is a hierarchical "JSON":https://www.json.org/ document with a single reserved @_id@ field. All documents in a collection may have different fields and structure.
* *Command:* Commands are performed on Collections of Documents. Commands may return zero or more documents from the collection, update or insert zero or more documents, or both. 
* *Clause:* Clauses are included in operations to control or extend the behavior of an operation. Clauses may be required or optional for an operation, when optional a default behavior is expected.  

These concepts are grouped together to form a *Request* sent by client software for the API to process, the API responds with a response document whose format depends on the command being executed. Each request includes:

* The name of a collection of documents to execute against, a single request may only execute against a single collection. 
* A command to execute. 
* The required and optional clauses.
* Any out of band metadata such as authentication or tracing information. The nature of such out of band metadata is outside of the scope of this document.  

*TODO:* DO we need to have multiple commands in a single request? 

h2(#conventions). Conventions 

To aid in specifying the Document API, we will use the following conventions in this document:

* Language rules will be given in a "BNF":http://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form -like notation:

bc(syntax). <start> ::= TERMINAL <non-terminal1> <non-terminal1>

* Nonterminal symbols will have @<angle brackets>@.
* As additional shortcut notations to BNF, we'll use traditional regular expression's symbols (@?@, @+@ and @*@) to signify that a given symbol is optional and/or can be repeated. We'll also allow parentheses to group symbols and the @[<characters>]@ notation to represent any one of @<characters>@.
* The grammar is provided for documentation purposes and leave some minor details out. 
* Sample code will be provided in a code block:

bc(sample). SELECT sample_usage FROM cql;

* References to keywords or API examples text will be shown in a @fixed-width font@. 

Samples of requests, operations, and clauses will be presented and encoded as a JSON document. This is illustrative of a suggested encoding as described in the "Preamble":#preamble   

h2(#namespace). Namespace

*TODO:* define the namespace, it's properties etc . Do we define how to create one ?

h2(#collection). Collection

*TODO:* define the collection, it's properties etc . Do we define how to create one ? 

h2(#document). Document 

*TODO:* Describe how do we define a document and then refer to the parts of a JSON document, e.g. key or path etc ?  

h2(#commands). Commands

Commands are included in a request and are executed against a single collection. 

Each command specifies one or more "Clauses":#clauses that control how it operates, and may include set of options to further modify behavior. 

The following commands are supported for collections: 

* @bulkWrite@
* @countDocuments@ Count documents that match a filter. 
* @deleteMany@
* @deleteOne@
* @estimatedDocumentCount@ Estimate total number of documents in a collection.
* "@find@":#commandFind
* @findOne@ 
* @findOneAndDelete@
* @findOneAndReplace@
* "@findOneAndUpdate@":#commandFindOneAndUpdate
* @insertOne@
* @insertMany@
* @replaceOne@
* @updateOne@
* @updateMany@


*TODO:* Add other commands below as we work through the list

_Syntax:_

bc(syntax).. 
<command> ::=  <find-command> |


<command-response> ::= <single-document-response> |
                       <paginated-document-response>

<single-document-response> ::= data <document>

<paginated-document-response> ::= count <total-document-count>, 
                                  pageState <page-state>, 
                                  data <paginated-documents>

<total-document-count> ::= <positive-integer>
<page-state> ::= <ascii-string>
<paginated-documents> ::= (<document>)*

h3(#commandResponses). Command Responses


h4(#commandResponseSingle). @<single-document-response>@ 

*TODO:* included because current API has one, not sure if we would because there may not be a select single document call 

h4(#commandResponseSinglePaginated). @<paginated-document-response>@ 

@<paginated-document-response>@ returns a list of zero or more @<document>@'s, which may be part of a larger list of response documents. Successive calls to the same command that pass the @pageState@ from the previous response will paginate through the total number of response documents. 

The response has the following parts:

* @count@ the integer count of the total number of documents that make up the result document set, this may be more than the number included in the current page. 
* @pageState@ an opaque ASCII string used by the API to paginate large result sets. Pass the @pageState@ in the options for a request to request the next page. 
* @data@ a list of @<document>@'s that make up this page.       

_Sample:_

bc(sample).. 
{
    "count": 1,
    "pageState": "2f4acd34",
    "data": [
        {
            "_id": "my-first-post-a6h54",
            "name": "aaron",
            "age": 47
        }
    ]
}


p.*TODO:* check this multi doc return format 

h3(#commandFind). Find Command

@find@ selects zero or more documents from a collection that match a selection filter, and returns either the complete documents or a partial projection of each document. 

_Syntax:_

bc(syntax).. 
<find-command> ::= find <find-command-payload> 
<find-command-response> ::= <paginated-document-response> 

<find-command-payload> ::= <filter-clause>?
                             <projection-clause>? 
                             <sort-clause>? 
                             <find-command-options>?

<find-command-options> ::= (<find-option-name> <find-option-value>,)*


p. _Sample:_ 

bc(sample).. 
// select all documents in a collection, return complete documents
{"find" : {} }

// select where name == "aaron" and return selected fields
{"find" : {
    "filter" : {"name": "aaron"},
    "projection" : {"name": 1, :"age" : 1}
    } 
} 

h4(#commandFindOrderOfOperation). Find Command Order of Operations

p. TODO: add how cursor state fits into the processing 

@find@ commands are processed using the following order of operation: 

# @<filter-clause>@ is applied to the collection to select *candidate set* of documents, if no @<filter-clause>@ is supplied all documents in the collection are candidate documents.  
# @<sort-clause>@ is applied to the candidate documents to order them, if no @<sort-clause>@ is supplied the documents sort order is undefined.
# The @limit@ option from @<find-command-options>@ is applied to reduce the number of candidate documents to no more than @limit@, if no @limit@ is supplied all candidate documents are included. 
# @<projection-clause>@ is applied to each candidate document to create the *result set* documents to be included in the @<find-command-response>@, if no @<projection-clause>@ is specified the complete candidate documents are included in the response.

h4(#commandFindOptions). Find Command Options

@<find-command-options>@ is a map of key-value pairs that modify the behavior of the find command. All options are optional, with default behavior applied when not provided. 

|_. Find Option |_. Type |_. Description |
| @limit@ | Positive Integer | Limits the number of documents to be returned by the command. ==<br>== If unspecified, or 0, there is no limit on number of documents returned. Note that results may still be broken into pages.|
| @page-state@ | ASCII String | The page state of the previous page, when supplied the @find@ command will return the next page from the result set. ==<br>== If unspecified, null, or an empty string the first page is returned.|


h3(#commandFindOneAndUpdate). findOneAndUpdate Command


@findOneAndUpdate@ selects one document from a collection using a match filter that is updated by the server using an atomic transaction, either all the changes described in the @<update-document-clause>@ are stored or none of them are (further details of the transaction requirements below). It then returns a projection of either the document before or after the update has been applied.

_Syntax:_

bc(syntax).. 
<find-one-and-update-command> ::= findOneAndUpdate <find-one-and-update-command-payload> 
<find-one-and-update-command-response> ::= <single-document-response> 

<find-one-and-update-command-payload> ::= <filter-clause>? 
                             <update-document-clause>? 
                             <sort-clause>? 
                             <projection-clause> ?
                             <find-one-and-update-command-options>?

<find-one-and-update-command-options> ::= (<find-option-name> <find-option-value>,)*


p. _Sample:_ 

bc(sample).. 
// Update the first document (by natural order) to increase the points field by 5
{"findOneAndUpdate" : 
    "filter": {} ,
    "update": { $inc: { "points" : 5 } } 
}

// Increase the age for the document with id 123, and return the name and age 
{"findOneAndUpdate" : {
    "filter" : {"_id": "123"},
    "update": { $inc: { "age" : 5 } }, 
    "projection" : {"name": 1, :"age" : 1}
    } 
} 


h2(#clauses). Clauses

* "Filter Clause":#clauseFilter
* "Projection Clause":#clauseProjection 
* "Sort Clause":#clauseSort 

h3(#clauseFilter). Filter Clause 

The filter clause is used to select zero or more documents from collection, how the documents are operated on depends on the command the clause is used with. 

_Sample:_

bc(sample).. 
// Identity filter that returns all documents
{}

// Equality match for a single field
{“name” : “aaron”}
{“name” : {“eq” : “aaron”}}

// Combination of literal and operator expressions 
{"name" : "aaron", "age" : {"$gt" : 40}}


p. _Syntax:_

bc(syntax).. 
<filter-clause> ::= <filter-expression>* 

<filter-expression> ::= <filter-comparison-expression> | <filter-logical-expression> 
                        (, <filter-comparison-expression> | <filter-logical-expression>)*

<filter-comparison-expression> ::= <filter-comparison-path> ( <literal> | <filter-operator-expression>)
<filter-comparison-path> :== <document-path>
<filter-operator-expression> ::= <filter-operation> (, <filter-operation>)*

<filter-operation> ::= <filter-comparison-operation> |
                    <filter-logical-unary-operation> |
                    <filter-element-operation> |
                    <filter-array-operation> 

<filter-comparison-operation> ::= <filter-comparison-value-operation> | <filter-comparison-array-operation>
<filter-comparison-value-operation> ::= <filter-comparison-value-operator>, <filter-comparison-value-operand>  
<filter-comparison-value-operator> ::= $eq, $gt, $gte, $lt, $lte, $ne
<filter-comparison-value-operand> ::= <literal> 
<filter-comparison-array-operation> ::= <filter-comparison-array-operator>, <filter-comparison-array-operand>  
<filter-comparison-array-operator> ::= $in, $nin
<filter-comparison-array-operand> ::= <literal-list> 

<filter-logical-unary-operation> ::= <filter-logical-unary-operator-not>
<filter-logical-unary-operator-not> ::= $not <filter-operator-expression>

<filter-element-operation> ::= <filter-element-operation-exists>
<filter-element-operation-exists> ::= $exists <filter-element-operation-exists-operand>  
<filter-element-operation-exists-operand> ::= true | false

<filter-array-operation> ::= <filter-array-operation-all> | 
                             <filter-array-operation-elemMatch> |
                             <filter-array-operation-size>
<filter-array-operation-all> ::= $all <literal-list>
<filter-array-operation-elemMatch> ::= $elemMatch <filter-comparison-operation> (, <filter-comparison-operation>)*
<filter-array-operation-size> ::= $size <positive-integer>


<filter-logical-expression> ::= <filter-logical-compound-operator> <filter-logical-compound-operand>
<filter-logical-compound-operator> ::= $and, $or, $nor
<filter-logical-compound-operand> ::= [<filter-expression> (, <filter-expression>)]* 

# ========== BEGIN TODO =============
# 
# filter-element-operation - type 
# <filter-evaluation-operators> ::= $mod
# ========== END TODO ===============

# ========== BEGIN Excluded =========
$expr, $jsonSchema, $regex, $text, $where, all geo things 
# ========== END Excluded ===========


p. A @<filter-expression>@ may either apply to a node in the document identified by a path (@<filter-comparison-expression>@), or be a logical expression that evaluates the result of sub expressions (@<filter-logical-expression>@).

A (@<filter-comparison-expression>@) identifies a *context node* in the document using a @<document-path>@. The context node, including the value, name, type, document path, and any other meta data, may then tested by the expression. If the expression specifies a @<literal>@ then the value of the node is tested using an @$eq@ operation. Otherwise the expression will specify one @<filter-operator-expression>@ which defines one or more @<filter-operation>@'s which must all evaluate to @True@ for the @<filter-operator-expression>@ to evaluate to @True@.

_Sample:_

bc(sample).. 
// Comparison expression using a literal value
{“name” : “aaron”}
// Comparison expression using a single operator expression, equivalent to the previous example
{“name” : {“eq” : “aaron”}}
// Comparison expression using a single and a multiple operator expression
{“name” : {“eq” : “aaron”}, "age" : {"$gt" : 40, "$lt" : 50}}
// Comparison expression testing metadata about the context node 
{"name" : {"$exists" : False}}


p. The @<document-path>@ may fail to select a context node, either for all documents in the collection or only some. Whenever this happens a "Missing" context node is evaluated by the @<filter-operation>@'s as the operations may handle a missing context node differently. For example @$eq@ and @$ne@ have opposite behavior, see the operation descriptions below for details.

A @<filter-operation>@ is an operation on the context node identified by the expression. The node provides the Left Hand Side (LHS) operand of the operation, while the definition provides the operator and Right Hand Side (RHS) operand (if required). All @<filter-operation>@ *must* evaluate to either @True@ or @False@. 

The other form of @<filter-expression>@ is a @<filter-logical-expression>@ which applies a logical operation to a list of sub @<filter-expression>@'s. As such this type of expression does not specify a context node for operations to be evaluated. 

_Sample:_

bc(sample).. 
// Logical expression using a literal value and single operator expressions
{ "$and" : [{“name” : “aaron”}, {"age" : {"$gt" : 40}}]}
// Note, there is an implicit $and operator for all top level expressions, so this is equivalent 
{{“name” : “aaron”}, {"age" : {"$gt" : 40}}}
// Logical expression using multiple operator expressions
{ "$or" : [{“name” : {“eq” : “aaron”}}, {"age" : {"$gt" : 40}}]}

h4(#clauseFilterOrderOfOperation). Filter Clause Order of Operations

The filter clause is made up of zero or more expressions that evaluate to @True@ or @False@. 

The @<filter-clause>@ is evaluated using the following order of operations:  

# If the filter clause has zero expressions then all documents in the collection are selected.
# If the filter clause has a single @<filter-expression>@ then all documents in the collection where the expression evaluates to @True@ are selected.
# If the filter clause has more than one top level @<filter-expression>@ then all documents in the collection where all expressions evaluate to @True@ are selected.


h4(#comparisonOperationLiteral). @<literal>@ comparison

A literal comparison operation performs the @$eq@ operation on the context node using the supplied literal value. See "$eq":#comparisonOperationEq for the definition. 

h4(#comparisonOperationEq). $eq operation

@$eq@ applies a type sensitive equals operation to the value context node and the @<literal>@ operand. 

_Note:_ This version of the specification only defines equality for atomic values such as string or a number. It does not support equality between arrays or sub documents. 

@$eq$@ evaluates to @True@ when all of the following conditions are @True@: 

# The context node exists.
# The type of the context node value matches the type of the operand, i.e. string can be compared to string, or number to number. However a number cannot be compared to a string.
# The value of the node is equal to the @<literal>@ operand. String comparisons use string binary comparison i.e. it is sensitive to case and other modifiers.

h4(#comparisonOperationGt). $gt operation

TODO: node must exist

h4(#comparisonOperationGte). $gte operation

TODO: node must exist

h4(#comparisonOperationLt). $lt operation

TODO: node must exist

h4(#comparisonOperationLte). $lte operation

TODO: node must exist

h4(#comparisonOperationNe). $ne operation

@$ne@ applies a type sensitive not-equals operation to the value of the context node and the @<literal>@ operand. 

_Note:_ This version of the specification only defines equality for atomic values such as string or a number. It does not support equality between arrays or sub documents. 

@$ne$@ evaluates to @True@ when *either* of the following conditions are @True@: 

# The context node does not exist.
# The type of the context node value is different to the type of the operand.
# The value of the node is not-equal to the @<literal>@ operand. String comparisons use string binary comparison i.e. it is sensitive to case and other modifiers.

h4(#comparisonOperationIn). $in operation

@$in@ applies to context node values that are either atomic or an array, in either case the RHS operand is a list of literals. The operation tests if the value of the context node is present in the RHS operand.

When the value of the context node is atomic, @$in@ evaluates to @True@ when all of the following conditions are @True@: 

# The context node exists
# @$eq@ evaluates to @True@ for any pair of the node value and a value from the RHS operand list. 

When the value of the context node is an array, @$in@ evaluates to @True@ when all of the following conditions are @True@: 

# The context node exists
# @$eq@ evaluates to @True@ for any pair of a value from the node array or value in the RHS operand.

h4(#comparisonOperationNin). $nin operation

@$nin@ applies to context node values that are either atomic or an array, in either case the RHS operand is a list of literals. The operation tests if the value of the context node is not present in the RHS operand.

When the value of the context node is atomic, @$nin@ evaluates to @True@ when *either* of the following conditions are @True@: 

# The context node does not exist.
# @$eq@ evaluates to @False@ for all pairs of the node value and a value from the RHS operand list. 

When the value of the context node is an array, @$nin@ evaluates to @True@ when *either* of the following conditions are @True@: 

# The context node does not exist
# @$eq@ evaluates to @False@ for all pairs of a value from the node array and a value in the RHS operand.

h4(#logicalOperationNot). $not operation

@$not@ applies a logical _Not_ to a @<filter-operator-expression>@, which is evaluated against the context node identified by the @<filter-comparison-path>@ of hte comparison express. While @$not@ is logical operation it behaves differently to @$and@, @$or@, and @$nor@ as they apply logical operations to the results of 1 or more sub @<filter-expression>@ while @$not@ applies to a single @<filter-operator-expression>@. 

_Sample:_

bc(sample).. 
// Applying $not to an $eq operation
{“name” : {"$not" : {“eq” : “aaron”}}}


p. Note that the behavior of @$not@ when the context node does not exist means that it can change the behavior of operations and should not always be considered a logical opposite. 

@$not$@ evaluates to @True@ when *either* of the following conditions are @True@: 

# The context node does not exist.
# The result of evaluating the RHS @<filter-operator-expression>@ is @False@.

The performance of applying @$not@ to a multi-clause @<filter-operator-expression>@ will often be slower than constructing a @<filter-operator-expression>@ that uses operations that directly express the test. This is because the @<filter-operation>@'s in the @<filter-operator-expression>@ are joined with a logical AND, meaning only one operation has to fail for the whole expression to fail allowing the expression to fail before testing all operations. In contrast applying NOT to the output of the @<filter-operator-expression>@ means that all operations must be tested (and evaluate to TRUE) for document to be excluded. 

h4(#elementOperationExists). $exists operation

@$exists@ applies to the metadata of the context node, to test if it exists. The RHS operand is a boolean value that controls the return value of the operation. 

_Sample:_

bc(sample).. 
// Select documents that have a name
{“name” : {"$exists" : true}}
// Select documents that do not have a name
{“name” : {"$exists" : false}}


p. @$exists@ evaluates to @True@ when all of the following conditions are @True@: 

# The context node exits. 
# The value of the RHS operand is @true@.

h4(#arrayOperationAll). $all operation

TODO:

h4(#arrayOperationAll). $elemMatch operation

TODO: 

h4(#arrayOperationAll). $size operation

TODO:

h3(#clauseProjection). Projection Clause 

A Projection clause is applied to zero or more input documents to project all of part of each document into an output document. Each input document maps to a single output document, although each output document may have a different document layout. For example when an input document is missing a projected field it will not appear in the output document. 

p. _Syntax:_

bc(syntax).. 
<projection-clause> ::= <projection-expression>*

<projection-expression> ::= <projection-field-expression> | 
                            <projection-array-expression>

<projection-field-expression> ::= <projection-field-path> <projection-field-inclusion> 
<projection-field-path> ::= <document-path> 
<projection-field-inclusion> ::= 0 | 1 | true | false
 

<projection-array-expression> ::=  <projection-field-path> <projection-array-projection> 
<projection-array-projection> ::= <projection-array-elem-match-projection> |
                                  <projection-array-slice-projection> | 
                                  <projection-array-limit-projection>

<projection-array-elem-match-projection> ::= $elemMatch <filter-comparison-operation> (, <filter-comparison-operation>)*

<projection-array-slice-projection> ::= $slice <slice-number> | <slice-to-skip> <slice-to-return> 
<slice-number> ::= <integer>
<slice-to-skip> ::= <integer> 
<slice-to-return> ::= <positive-integer>

@TODO: this is $ in projection, not sure if mquery supports this
<projection-array-limit-projection> ::= $


p. Each @<projection-clause>@ is contains zero or more @<projection-expression>@'s which are all applied to each input document in an order decided by the server. The output of all @<projection-expression>@'s evaluated for a single input document create a single output document. 


h4(#clauseProjectionOrderOfOperation). Projection Clause Order of Operations

The @<projection-clause>@ is evaluated using the following order of operations:  

# If the projection clause is missing or empty the entire input document is selected for the output document. 
# Each @<projection-expression>@ is evaluated against the input document in an undefined order. The output is mapped to a field with the same path as the @<projection-field-path>@ for the expression. 
# Unless excluded via a @<projection-field-expression>@ the @<_id>@ field is included in the output document. 

h4(#projectionFieldExpression). @<projection-field-expression>@

@<projection-field-expression>@ is the simplest form of expression. It  identifies a field using a @<document-path>@ and includes or specifically excludes it from the output. Note that for any @<projection-clause>@ other than the identity clause any fields not listed are excluded from the output document. The @<projection-field-expression>@ includes a field using @1@ or @true@ and excludes it using @0@ or @false@. See "Projection Clause Order of Operations":#clauseProjectionOrderOfOperation for special treatment of the @_id@ field.

p. _Sample:_

bc(sample).. 
// Identity projection, selects the entire document 
{}
// Select top level and lower level fields 
{ "name" : 1, "address.country" : true}
// Select top level and lower level fields and exclude the _id 
{ "name" : 1, "address.country" : true, "_id": 0}

When the @<document-path>@ does not exist in the input document: 

# The output document will not include a field with that key. 

When the @<document-path>@ does exist in the input document: 

# If @<projection-field-inclusion>@ is @1@ or @true@ the key and it's entire value (including a sub-document if present) will be included in the output document. 
# If @<projection-field-inclusion>@ is @0@ or @false@ the output document will not include a field with that key


h4(#projectionElemMatchExpression).  @<projection-array-elem-match-projection>@ $elemMatch

*TODO:* confirm this is supported by mquery, not in the docs - should be supported, cannot see where 

h4(#projectionArraySliceExpression).  $slice

@<projection-array-slice-projection>@ is used to select a 1 or more elements from a source document array for the output document based on their position in the array. The element and any sub document are all selected. The @slice@ expression has three forms based on the parameters passed. 

Regardless of the supplied parameters @<projection-array-slice-projection>@ has the following behavior: 

# If the input document does not contain the node specified by the @<projection-field-path>@ the field is not selected for the output document. 
# If the input node does exist, and is not an array the field is not selected for the output document. 

If only @<slice-number>@ is supplied and the value is a positive integer then: 

# If the size of the array is less than or equal to the @<slice-number>@ the entire array is selected for the output document. 
# If the size of the array is greater than the @<slice-number>@ then the first @<slice-number>@ elements of the array are selected for the output in array order.


If only @<slice-number>@ is supplied and the value is a negative integer then: 

# If the size of the array is less than or equal to the @absolute(<slice-number>)@ the entire array is selected for the output document. 
# If the size of the array is greater than the @<slice-number>@ then the last @<slice-number>@ elements of the array are selected for the output in array order.
 
If only @<slice-number>@ is supplied and the value is a zero then:

# The field is selected for the output document as a zero length array. 

If both @<slice-to-skip>@ and @<slice-to-return>@ are supplied then: 

# If @<slice-to-skip>@ is a positive integer and greater than or equal to the size of the input array an empty array is returned. 
# If @<slice-to-skip>@ is a positive integer and less than the size of the input array it is the number of elements to skip before selecting elements. For a 0 based array a value of 1 indicates elements should be selected starting at the second element at index 1.
# If @<slice-to-skip>@ is a negative integer and it's absolute value is greater than or equal to the size of the input array the starting position is the start of the array. 
# If @<slice-to-skip>@ is a negative integer and it's absolute value is less than the size of the input array, it is the number of elements to skip backwards from the end of the array. For a 0 based array a value of -1 indicates elements should be selected starting with the last element.
# @<slice-to-return>@ indicates the number of elements to return after skipping @<slice-to-skip>@. 

p. _Sample:_

bc(sample).. 
// With the input array ["foo", "bar", "baz"]
// Select first 2 elements ["foo", "bar"]
{"$slice" : 2}
// Select last 2 elements ["bar", "baz"]
{"$slice" : -2}
// Select one element starting at second ["bar"]
{"$slice" : [1,1]}
// Select the last element, same as -1 ["baz"]
{"$slice" : [-1,1]}


h4(#projectionArrayLimitExpression).  @<projection-array-limit-projection>@ $

*TODO:* not sure if supported by mquery, this is the $ - should be supported, cannot see where 


h3(#clauseSort). Sort Clause 

A sort clause is applied to a set of documents to order them. Examples of this include ordering a large result set that will returned as pages, or sorting a candidate set of documents to determine which document will be returned when only a single document is required.   

p. _Syntax:_

bc(syntax).. 
<sort-clause> ::= [<sort-expression>*]

<sort-expression> ::= (-)?<document-path>

p. Each @<sort-clause>@ contains an ordered list of @<sort-expression>@'s which are used to sort a candidate set of documents. The order of @<sort-expression>@'s is important and should be preserved as the request is transmitted and processed.

Each @<sort-expression>@ identifies a field in the document to sort by. By default the field values are sorted in ascending order, if the field name is prefixed with a @-@ the field is sorted in descending order. A maximum of *TODO* number of @<sort-expression>@'s may be included in a @<sort-clause>@.

p. _Sample:_

bc(sample).. 
// Sort by one field ascending
["name"]
// Sort by one field descending, and a second ascending 
["-age", "name"]

h4(#clauseSortOrderOfOperation). Sort Clause Order of Operations

The @<sort-clause>@ is evaluated using the following order of operations:

# If the sort clause is missing or contains zero @<sort-expression>@'s the order of candidate documents is unchanged, and is assumed to be the _natural order_ applied by the underlying database.
# If the @<sort-clause>@ contains a single @<sort-expression>@ the candidate documents are ordered by that field using the "Sort Order":#clauseSortOrder. If two or more documents have equivalent value for a field, the order of the documents will be natural order. 
# If the @<sort-clause>@ contains two or more @<sort-expression>@'s the first expression is used to sort the documents, and the second is used to sort all documents that have the same value for the first expression. A third @<sort-expression>@ is used to sort documents with a duplicate value for the second expression and so on.  

h4(#clauseSortOrder). Sort Order

*TODO:* type coercion, missing fields 