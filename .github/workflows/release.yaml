# @author Saurabh Verma
name: Release workflow

# runs on
# * pushes and pull requests on the "main"
# * manual trigger
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  workflow_dispatch:
    inputs:
      skipPublish:
        description: 'Skip publishing docker images and JARs to gcr.io?'
        required: true
        default: true
        type: boolean
      tag:
        description: 'Custom release tag value.'
        required: true
        type: string

# global env vars, available in all jobs and steps
env:
  ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
  ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
  MAVEN_OPTS: '-Xmx4g'

jobs:

  # resolves tag value
  # outputs the resolved release tag value in the release-tag output var
  resolve-tag:
    name: Resolve tag
    runs-on: ubuntu-latest
    outputs:
      release-tag: ${{ steps.resolve_tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v3

      - name: Set reference
        id: vars
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: Resolve tag
        id: resolve_tag
        run: |
          TAG=${{ inputs.tag != null && inputs.tag || steps.vars.outputs.tag }}
          echo "Resolved tag for the release $TAG"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

  # creates a new release if it's not existing
  # outputs the upload URL in the release-upload-url output var
  create-release:
    name: Create release
    needs: resolve-tag
    runs-on: ubuntu-latest
    outputs:
      release-upload-url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{needs.resolve-tag.outputs.release-tag}}
          release_name: Release ${{needs.resolve-tag.outputs.release-tag}}
          draft: false
          prerelease: false

  # publishes the docker image
  publish-docker:
    name: Publish docker image
    needs: resolve-tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven
      - run: echo "JAVA_17=$JAVA_HOME" >> $GITHUB_ENV

      - name: Setup Maven
        run: |
          mkdir -p ~/.m2
          cat <<EOF > ~/.m2/settings.xml
          <settings>
            <servers>
              <server>
                <id>artifactory-snapshots</id>
                <username>${ARTIFACTORY_USERNAME}</username>
                <password>${ARTIFACTORY_PASSWORD}</password>
              </server>
              <server>
                <id>artifactory-releases</id>
                <username>${ARTIFACTORY_USERNAME}</username>
                <password>${ARTIFACTORY_PASSWORD}</password>
             </server>
           </servers>
          </settings>
          EOF

      # We setup Cloud SDK for prod first as we need to push to the prod GAR
      - id: 'auth-prod'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GCR_DEVOPS_SERVICE_ACCOUNT_KEY }}'

      - name: Set up Cloud SDK (Prod)
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: stargateio

      - name: Configure Docker
        # we must specify the GAR_REGION because it's not in the default region handled by configure-docker
        run: |-
          gcloud auth configure-docker -q

      - name: Build and push (apis, gcr.io)
        if: ${{ !inputs.skipPublish }}
        run: |
          JAVA_HOME=$JAVA_17 ./mvnw -B -ntp clean package -DskipTests -Dquarkus.container-image.build=true -Dquarkus.container-image.tag=${{needs.resolve-tag.outputs.release-tag}}
          docker tag stargateio/docsapi:${{needs.resolve-tag.outputs.release-tag}} gcr.io/stargateio/docsapi:${{needs.resolve-tag.outputs.release-tag}} && docker push gcr.io/stargateio/docsapi:${{needs.resolve-tag.outputs.release-tag}}

      - name: Build without push (apis, gcr.io)
        if: ${{ inputs.skipPublish }}
        run: |
          JAVA_HOME=$JAVA_17 ./mvnw -B -ntp clean package -DskipTests -Dquarkus.container-image.build=true -Dquarkus.container-image.tag=${{needs.resolve-tag.outputs.release-tag}}

  # creates a PR for bumping the versions to the next snapshot
  # only executed if we have created the new release
  create-pr:
    name: Version upgrade PR
    needs: [create-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # since we only bump the versions, Java 17 only is fine here
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      - name: Setup Maven
        run: |
          mkdir -p ~/.m2
          cat <<EOF > ~/.m2/settings.xml
          <settings>
            <servers>
              <server>
                <id>artifactory-snapshots</id>
                <username>${ARTIFACTORY_USERNAME}</username>
                <password>${ARTIFACTORY_PASSWORD}</password>
              </server>
              <server>
                <id>artifactory-releases</id>
                <username>${ARTIFACTORY_USERNAME}</username>
                <password>${ARTIFACTORY_PASSWORD}</password>
             </server>
           </servers>
          </settings>
          EOF

      - name: Update version numbers (apis)
        run: |
          ./mvnw -B -ntp release:update-versions -DautoVersionSubmodules=true versions:commit
          ./mvnw -B -ntp xml-format:xml-format fmt:format

      - name: Rev Version
        if: success()
        uses: peter-evans/create-pull-request@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit-message: "Bumping version for next docs api v3 release"
          title: "Bumping version for next docs api v3 release"
          branch-suffix: "short-commit-hash"
          base: "main"
          labels: "docsApiV3"
