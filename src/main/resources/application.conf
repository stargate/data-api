datastax-java-driver {
  advanced.protocol {
    version = V4
  }
  advanced.retry-policy {
      class = io.stargate.sgv2.jsonapi.service.cqldriver.CqlProxyRetryPolicy
    }
  advanced.session-leak.threshold = 0
  advanced.connection {
    pool.local.size = 8
  }
  advanced.metadata {
    schema.request-timeout = 10 seconds
    schema {
      # Let's get metadata for "system" and "system_*" keyspaces
      # (copied from default application.conf, removed first 2 entries)
      refreshed-keyspaces = [ "!/^dse_.*/", "!solr_admin", "!OpsCenter" ]
    }
  }
  advanced.metrics {
    id-generator{
      class = io.stargate.sgv2.jsonapi.service.cqldriver.CustomTaggingMetricIdGenerator
    }
    factory.class = MicrometerMetricsFactory
    session {
      enabled = [cql-requests, cql-client-timeouts]
      cql-requests {
        refresh-interval = 30 seconds
      }
    }
    node {
      enabled = [retries.total, pool.in-flight]
    }
  }
  advanced.request-tracker {
    classes = [RequestLogger]
    logs {
      success.enabled = false
      slow {
        threshold = 1 second
        enabled = true
      }
      error.enabled = true
      max-query-length = 500
      show-values = false
      max-value-length = 50
      max-values = 50
      show-stack-traces = true
    }
  }
  basic.request.timeout = 20 seconds
  profiles {

    create {
      basic.request.timeout = 10 seconds
    }

    drop {
      basic.request.timeout = 15 seconds
    }

    truncate {
      basic.request.timeout = 15 seconds
    }

    count {
      basic.request.timeout = 10 seconds
    }

    table-read {
      basic.request.timeout = 10 seconds
      consistency = LOCAL_QUORUM
    }
    table-write {
      basic.request.timeout = 10 seconds
      consistency = LOCAL_QUORUM
    }
    table-create_schema {
      basic.request.timeout = 10 seconds
      consistency = LOCAL_QUORUM
    }
    table-truncate {
      basic.request.timeout = 15 seconds
      consistency = LOCAL_QUORUM
    }
  }
}
