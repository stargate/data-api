# Data API Error Objects V2
#
# This file contain the error messages that are returned by the Data API
#
# The error descriptions in this file are ready by the APIException classes to create the content for the errors.
# That is, only errors defined in the code are read from this file, see the APIException class in the code
# for a description of how the errors are defined and manged.
#
# Errors have the following hierarchy:
# Family -> (optional) Scope -> Code
#
# Where
# * Family: Identifies if the error relates to the client request or the server processing, analogous
#           to the 4XX and 5XX HTTP status codes. Supported values are REQUEST or SERVER. In this file they are
#           represented by the request-errors and server-errors keys.
# * Scope: Optionally identifies the part of the request or server processing that caused the fault, for example "FILTER"
#          when there is a problem in the filter clause. Scope generally map to a concrete APIException class such as
#          FilterException.
# * Code: A unique string identifying the error.
#
# All values are strings and must be UPPER_SNAKE_CASE_1 supporting upper case alpha and digits.
#
# FILE LAYOUT
# ===========
#
# "snippets" is a list of text snippets than can be included in any error body, the snippets are included in the
# variables when running the tempalte for the body of the error. Snippets are referenced using `${SNIPET.<NAME>}`
# where <NAME> is the name of the snippet key.
# Each snippet has:
# - name: UPPER_SNAKE_CASE_1
# - body: A string with the text of the snippet, recommend using the `|-` to trim trailing newlines.
#
# "request-errors" and "server-errors" are lists of error objects, for the REQUEST and SERVER family respectively.
# Each error object has:
# - scope: UPPER_SNAKE_CASE_1
# - code: UPPER_SNAKE_CASE_1
# - http-status-override: (optional) The HTTP status code to return when this error is thrown. If not present, the
#                           default status code is 200 for most things. This is not returned in the error object JSON
#                           It is used to override the HTTP status code in the response.
#                           NOTE: NO checking is done to confirm this is a valid HTTP status code.
# - title: A short title for the error, that must not change between instances of the error.
# - body: A longer body that may contain ${vars} to be passed by the code when created, and references to snippets.
#         This can be a multi line string, recommend using the `|-` to trim trailing newlines.
#
# NOTE: Please keep the entries sorted on their name for snippets, or scope and code for errors. Please add a
#       new line after each entry, using the `|-` to trim trailing newlines.

# ================================================================================================================
# Snippets
# ================================================================================================================

snippets:
  - name: CONTACT_SUPPORT
    body: |-
      Please contact support if the issue persists.

  - name: RETRY
    body: |-
      It is safe to retry this request.

  - name: INEFFICIENT_QUERY
    body: |-
      The query was executed without taking advantage of the primary key or indexes on the table, this can have performance implications on large tables.
      
      See documentation at XXXX for best practices for filtering.

  - name: RESEND_USING_ONLY_DEFINED_COLUMNS
    body: |-
      Resend the request using only defined columns.



# ================================================================================================================
# Request Errors
# ================================================================================================================

request-errors:
  # UNSCOPED request errors
  - scope:
    code: DOCUMENT_UNPARSEABLE
    title: Unable to parse the document
    body: |-
      big long message with ${vars} in it.
      
      ${SNIPPET.CONTACT_SUPPORT}

 # DOCUMENT request errors
  - scope: DOCUMENT
    code: MISSING_PRIMARY_KEY_COLUMNS
    title: Missing table primary key columns in document
    body: |-
      All primary key columns must be provided when inserting a document into a table. 
      
      The table ${keyspace}.${table} defines the primary key columns: ${primaryKeys}.
      
      The request included values for primary key columns: ${providedKeys}.
      The request did not include values for primary key columns: ${missingKeys}.
      
      Resend the request with the missing primary key columns.

  # NOTE: UNKNOWN_TABLE_COLUMNS is also in the FILTER scope
  - scope: DOCUMENT
    code: UNKNOWN_TABLE_COLUMNS
    title: Unknown table columns in document
    body: |-
      Only columns defined in the table schema can be included when inserted a document into a table.
      
      The table ${keyspace}.${table} defines the columns: ${allColumns}.
      The request included the following unknown columns: ${unknownColumns}.
      
      {SNIPPET.RESEND_USING_ONLY_DEFINED_COLUMNS}

  - scope: DOCUMENT
    code: UNSUPPORTED_COLUMN_TYPES
    title: Unsupported table column data types in document
    body: |-
      Only supported column types can be included when inserting a document into a table.
      
      The table ${keyspace}.${table} defines the columns: ${allColumns}.
      The request included the following columns that have unsupported data types: ${unsupportedColumns}.
      
      Resend the request using only supported column types.

  - scope: DOCUMENT
    code: INVALID_COLUMN_VALUES
    title: Invalid values for table columns
    body: |-
      Only values that are supported by the column data type can be included when inserting a document into a table.
      
      The table ${keyspace}.${table} defines the columns: ${allColumns}.
      The request included the following columns that had values that are invalid: ${invalidColumns}.
      
      Resend the request using only supported column values.

  # FILTER request errors
  - scope: FILTER
    code: INVALID_FILTER
    title: Invalid filter
    body: |-
      The filter clause is invalid. ${filter}
      
      ${SNIPPET.CONTACT_SUPPORT}

  # NOTE: UNKNOWN_TABLE_COLUMNS is also in the DOCUMENT scope
  - scope: FILTER
    code: UNKNOWN_TABLE_COLUMNS
    title: Unknown table columns in filter
    body: |-
      Only columns defined in the table schema can be filtered on.
      
      The table ${keyspace}.${table} defines the columns: ${allColumns}.
      The filter included the following unknown columns: ${unknownColumns}.
      
      ${SNIPPET.RESEND_USING_ONLY_DEFINED_COLUMNS}

  - scope: FILTER
    code: UNSUPPORTED_COLUMN_TYPES
    title: Unsupported table column data types in filter
    body: |-
      Only supported column types can be filtered.
      
      The table ${keyspace}.${table} defines the columns: ${allColumns}.
      The request included the following columns that have unsupported data types: ${unsupportedColumns}.
      
      Resend the request using only supported column types.  

  - scope: FILTER
    code: COMPARISON_FILTER_AGAINST_DURATION
    title: Cannot perform comparison filter against duration data type
    body: |-
      The filter used one of the comparison operations ($lt, $gt, $lte, $gte) against a column with a duration data type.
    
      The table ${keyspace}.${table} defines the columns: ${allColumns}.
      The request used a comparison operation on duration columns: ${durationFilters}.
      
      Resend the request using only supported operations on duration columns. 

  # Warnings

  - scope: WARNING
    code: MISSING_INDEX
    title: Filter includes columns that are not indexed
    body: |-
      The filter includes columns that are not indexed. 
      
      The table ${keyspace}.${table} has the primary key: ${primaryKey}.
      And has indexes on the columns: ${indexedColumns}.
      The request filtered on the un-indexed columns: ${unindexedFilters}.
      
      ${SNIPPET.INEFFICIENT_QUERY}

  - scope: WARNING
    code: NOT_EQUALS_UNSUPPORTED_BY_INDEXING
    title: Use of $ne (not equals) on indexed columns
    body: |-
      The filter uses $ne (not equals) on columns that, while indexed, are still inefficient to filter on using not equals.  
      
      Filtering using $ne on columns of type ${inefficientDataTypes} is inefficient, even when the columns are indexed.
      
      The table ${keyspace}.${table} uses these data types for the columns: ${inefficientColumns}.
      The request applied $ne to the columns: ${inefficientFilters}.
      
      ${SNIPPET.INEFFICIENT_QUERY}

  - scope: WARNING
    code: ZERO_FILTER_OPERATIONS
    title: Zero operations provided in query filter
    body: |-
      Zero filters were provided in the filer for this query. 
      
      Providing zero filters will return all rows in the table, which may have poor performance when the table is large. For the best performance, include one or more filters using the primary key or indexes.
      
      The table ${keyspace}.${table} has the primary key: ${primaryKey}.
      And has indexes on the columns: ${indexedColumns}.
      
      ${SNIPPET.INEFFICIENT_QUERY}

  - scope: WARNING
    code: INCOMPLETE_PRIMARY_KEY_FILTER
    title: Incomplete filter on table primary key
    body: |-
      The filter only specified columns from the primary key, but did not specify the full primary key for the table.  
      
      The table ${keyspace}.${table} defines the primary keys: ${primaryKeys}.
      The filter has the following issues: 
        - Missing Partition Keys: ${missingPartitionKeys}.
        - Out of order Partition Sort Keys: ${outOfOrderClusteringKeys}.
      
      For the best performance, filter on all partition columns and optionally on clustering columns in the order they are specified. 
      
      ${SNIPPET.INEFFICIENT_QUERY}      

  # Schema Errors

  - scope: SCHEMA
    code: COLUMN_DEFINITION_MISSING
    title: Column definition is missing for the provided primary key column.
    body: |-
      Column definition is missing for the provided primary key column: ${column_name}.

  - scope: SCHEMA
    code: COLUMN_TYPE_INCORRECT
    title: Column data type not provided or format invalid in the definition
    body: |-
      Column data type not provided or format invalid in the definition.
      Column definition can be defined in shorthand format as: 
        "column_name": "text"
      
      or in nested object structure format as:
        "column_name": {
          "type": "text"
        }

  - scope: SCHEMA
    code: COLUMN_TYPE_UNSUPPORTED
    title: Column data type used in the definition is not supported.
    body: |-
      Column data type ${type} used in the definition is not supported.
      Following are the supported data types: ${supported_types}

  - scope: SCHEMA
    code: MISSING_PRIMARY_KEYS
    title: Primary key definition needs to be provided while creating the table.
    body: |-
      Primary key definition needs to be provided while creating the table.
      They can be provided in the definition in 2 ways:
        1. A single primary key column can be defined using the shorthand format as:
          {
            "name": "primaryKeyAsStringTable",
              "definition": {
                "columns": {
                  "id": "text",
                  "age": "int",
                  "name": "type": "text",
                },
                "primaryKey": "id"
              }
            }
        2. A composite primary key can be defined using the advanced nested object structure format as:
          {
            "name": "primaryKeyAsStringTable",
              "definition": {
                "columns": {
                  "id": "text",
                  "age": "int",
                  "name": "type": "text",
                },
                "primaryKey": {
                  "partitionBy": [
                    "id"
                  ],
                  "partitionSort": {
                    "name" : 1, "age" : -1
                  }
                }
              }
            }    

  - scope: SCHEMA
    code: PRIMARY_KEY_DEFINITION_INCORRECT
    title: Primary key definition provided is incorrect.
    body: |-
      Primary key definition provided is incorrect.
      1. A single primary key column can be defined using the shorthand format as:
        "primaryKey": "id"
      2. A composite primary key can be defined using the advanced nested object structure format as:
        "primaryKey": {
          "partitionBy": [
            "id"
          ],
          "partitionSort": {
            "name" : 1, "age" : -1
          }
        }
        Following are checked as part of composite primary keys:
          a. partitionBy is mandatory.
          b. partitionSort is optional.
          c. partitionSort should not have the columns defined in partitionBy.
          d. partitionSort values should be either `1` for ascending or `-1` for descending.

  - scope: SCHEMA
    code: MAP_TYPE_INCORRECT_DEFINITION
    title: Map column data type definition provided in the request is incorrect.
    body: |-
      Map column data type definition provided in the request is incorrect.
      Map type should also be provided with `keyType` and `valueType`. `keyType` and `valueType` should be a primitive data type.
      Example map type definition:
        "column_name": {
          "type": "map",
          "keyType": "text",
          "valueType": "text"
        }

  - scope: SCHEMA
    code: SET_TYPE_INCORRECT_DEFINITION
    title: Set column data type definition provided in the request is incorrect.
    body: |-
      Set column data type definition provided in the request is incorrect.
      Set type should also be provided with `valueType`. `valueType` should be a primitive data type.
      Example map type definition:
        "column_name": {
          "type": "set",
          "valueType": "text"
        }

  - scope: SCHEMA
    code: LIST_TYPE_INCORRECT_DEFINITION
    title: List column data type definition provided in the request is incorrect.
    body: |-
      List column data type definition provided in the request is incorrect.
      List type should also be provided with a `valueType`. `valueType` should be a primitive data type.
      Example map type definition:
        "column_name": {
          "type": "list",
          "valueType": "text"
        }

  - scope: SCHEMA
    code: VECTOR_TYPE_INCORRECT_DEFINITION
    title: Vector column data type definition provided in the request is incorrect.
    body: |-
      Vector column data type definition provided in the request is incorrect.
      Vector type accepts `dimension`. `dimension` is an integer value.
      `service` definition is optional for vector type. It's used if the embedding needs to be done using data-api.
      Example map type definition:
        "column_name": {
          "type": "vector",
          "dimension": 1024,
          "service": {
            "provider": "nvidia",
            "modelName": "NV-Embed-QA"
          }
        }
  - scope: SCHEMA
    code: INVALID_CONFIGURATION
    title: Unable to parse configuration, schema invalid.
    body: |-
      Unable to parse configuration, schema invalid.

  - scope: SCHEMA
    code: INVALID_VECTORIZE_CONFIGURATION
    title: Unable to parse vectorize configuration, schema invalid.
    body: |-
      Unable to parse vectorize configuration, schema invalid for field ${field}.
  

# ================================================================================================================
# Server Errors
# ================================================================================================================

server-errors:
  # UNSCOPED server errors
  - scope:
    code: UNEXPECTED_SERVER_ERROR
    http-status-override: 500
    title: Unexpected server error
    body: |-
      An unexpected server error occurred while processing the request. 
      
      Error Class: ${errorClass}
      Error Message: ${errorMessage}

  # DATABASE scope server errors
  - scope: DATABASE
    code: CLOSED_CONNECTION
    title: Database connection was closed while processing the request
    body: |-
      The Data API connection to the database was closed by the database while processing the request.
      
      Writing to the ${schemaType} ${keyspace}.${table} failed to complete successfully. If this request modified data the changes may have been written to by some replicas, but not all. Future read requests may return eventually consistent results.
      
      The detailed response from the database was: ${errorMessage}    
      
      ${SNIPPET.RETRY}
  - scope: DATABASE
    code: TABLE_WRITE_TIMEOUT
    title: Timeout writing to table
    body: |-
      The Data API timed out while writing to the table.
      
      Writing to the table ${keyspace}.${table} failed to complete successfully within the timeout period. The data may have written to the table by some replicas, but not all. Future read requests may return eventually consistent results.
      
      The request was was waiting for ${blockFor} replicas to acknowledge the write, but only ${received} replicas responded within the timeout period.
      
      ${SNIPPET.RETRY}

  # EMBEDDING scope server errors
  - scope: EMBEDDING_PROVIDER
    code: CLIENT_ERROR
    title: The Embedding Provider returned a HTTP client error
    body: |-
      Provider: ${provider}; HTTP Status: ${httpStatus}; Error Message: ${errorMessage}

  - scope: EMBEDDING_PROVIDER
    code: SERVER_ERROR
    title: The Embedding Provider returned a HTTP client error
    body: |-
      Provider: ${provider}; HTTP Status: ${httpStatus}; Error Message: ${errorMessage}