# Data API Error Objects V2
#
# This file contain the error messages that are returned by the Data API
#
# The error descriptions in this file are ready by the APIException classes to create the content for the errors.
# That is, only errors defined in the code are read from this file, see the APIException class in the code
# for a description of how the errors are defined and manged.
#
# Errors have the following hierarchy:
# Family -> (optional) Scope -> Code
#
# Where
# * Family: Identifies if the error relates to the client request or the server processing, analogous
#           to the 4XX and 5XX HTTP status codes. Supported values are REQUEST or SERVER. In this file they are
#           represented by the request-errors and server-errors keys.
# * Scope: Optionally identifies the part of the request or server processing that caused the fault, for example "FILTER"
#          when there is a problem in the filter clause. Scope generally map to a concrete APIException class such as
#          FilterException.
# * Code: A unique string identifying the error.
#
# All values are strings and must be UPPER_SNAKE_CASE_1 supporting upper case alpha and digits.
#
# FILE LAYOUT
# ===========
#
# "snippets" is a list of text snippets than can be included in any error body, the snippets are included in the
# variables when running the tempalte for the body of the error. Snippets are referenced using `${SNIPET.<NAME>}`
# where <NAME> is the name of the snippet key.
# Each snippet has:
# - name: UPPER_SNAKE_CASE_1
# - body: A string with the text of the snippet, recommend using the `|-` to trim trailing newlines.
#
# "request-errors" and "server-errors" are lists of error objects, for the REQUEST and SERVER family respectively.
# Each error object has:
# - scope: UPPER_SNAKE_CASE_1
# - code: UPPER_SNAKE_CASE_1
# - http-status-override: (optional) The HTTP status code to return when this error is thrown. If not present, the
#                           default status code is 200 for most things. This is not returned in the error object JSON
#                           It is used to override the HTTP status code in the response.
#                           NOTE: NO checking is done to confirm this is a valid HTTP status code.
# - title: A short title for the error, that must not change between instances of the error.
# - body: A longer body that may contain ${vars} to be passed by the code when created, and references to snippets.
#         This can be a multi line string, recommend using the `|-` to trim trailing newlines.
#
# NOTE: Please keep the entries sorted on their name for snippets, or scope and code for errors. Please add a
#       new line after each entry, using the `|-` to trim trailing newlines.

# ================================================================================================================
# Snippets
# ================================================================================================================

snippets:
  - name: CONTACT_SUPPORT
    body: |-
      Please contact support if the issue persists.

  - name: RETRY
    body: |-
      It is safe to retry this request.

# ================================================================================================================
# Request Errors
# ================================================================================================================

request-errors:
  # UNSCOPED request errors
  - scope:
    code: DOCUMENT_UNPARSEABLE
    title: Unable to parse the document
    body: |-
      big long message with ${vars} in it.
      
      ${SNIPPET.CONTACT_SUPPORT}

 # DOCUMENT request errors
  - scope: DOCUMENT
    code: MISSING_PRIMARY_KEY_COLUMNS
    title: Missing table primary key columns in document
    body: |-
      All primary key columns must be provided when inserting a document into a table. 
      
      The table ${keyspace}.${table} defines the primary key columns: ${primaryKeys}.
      
      The request included values for primary key columns: ${providedKeys}.
      The request did not include values for primary key columns: ${missingKeys}.
      
      Resend the request with the missing primary key columns.

  - scope: DOCUMENT
    code: UNKNOWN_TABLE_COLUMNS
    title: Unknown table columns in document
    body: |-
      Only columns defined in the table schema can be included when inserted a document into a table.
      
      The table ${keyspace}.${table} defines the columns: ${allColumns}.
      The request included the following unknown columns: ${unknownColumns}.
      
      Resend the request using only defined columns.

  - scope: DOCUMENT
    code: UNSUPPORTED_COLUMN_TYPES
    title: Unsupported table column data types in document
    body: |-
      Only supported column types can be included when inserting a document into a table.
      
      The table ${keyspace}.${table} defines the columns: ${allColumns}.
      The request included the following columns that have unsupported data types: ${unsupportedColumns}.
      
      Resend the request using only supported column types.

  # FILTER request errors
  - scope: FILTER
    code: INVALID_FILTER
    title: Invalid filter
    body: |-
      The filter clause is invalid. ${filter}
      
      ${SNIPPET.CONTACT_SUPPORT}
 # FILTER request errors
  - scope: FILTER
    code: MULTIPLE_ID_FILTER
    title: the title for the error
    body: |-
      big long message with ${vars} in it

# ================================================================================================================
# Server Errors
# ================================================================================================================

server-errors:
  # UNSCOPED server errors
  - scope:
    code: UNEXPECTED_SERVER_ERROR
    http-status-override: 500
    title: Unexpected server error
    body: |-
      An unexpected server error occurred while processing the request. 
      
      Error Class: ${errorClass}
      Error Message: ${errorMessage}

  # DATABASE scope server errors
  - scope: DATABASE
    code: CLOSED_CONNECTION
    title: Database connection was closed while processing the request
    body: |-
      The Data API connection to the database was closed by the database while processing the request.
      
      Writing to the ${schemaType} ${keyspace}.${table} failed to complete successfully. If this request modified data the changes may have been written to by some replicas, but not all. Future read requests may return eventually consistent results.
      
      The detailed response from the database was: ${errorMessage}    
      
      ${SNIPPET.RETRY}
  - scope: DATABASE
    code: TABLE_WRITE_TIMEOUT
    title: Timeout writing to table
    body: |-
      The Data API timed out while writing to the table.
      
      Writing to the table ${keyspace}.${table} failed to complete successfully within the timeout period. The data may have written to the table by some replicas, but not all. Future read requests may return eventually consistent results.
      
      The request was was waiting for ${blockFor} replicas to acknowledge the write, but only ${received} replicas responded within the timeout period.
      
      ${SNIPPET.RETRY}

  # EMBEDDING scope server errors
  - scope: EMBEDDING_PROVIDER
    code: CLIENT_ERROR
    title: The Embedding Provider returned a HTTP client error
    body: |-
      Provider: ${provider}; HTTP Status: ${httpStatus}; Error Message: ${errorMessage}

  - scope: EMBEDDING_PROVIDER
    code: SERVER_ERROR
    title: The Embedding Provider returned a HTTP client error
    body: |-
      Provider: ${provider}; HTTP Status: ${httpStatus}; Error Message: ${errorMessage}